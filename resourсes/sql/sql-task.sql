--Task 1
SELECT s.aircraft_code,
       s.fare_conditions AS service_class,
       COUNT(s.seat_no)  AS seat_count
FROM seats s
         JOIN aircrafts a ON s.aircraft_code = a.aircraft_code
GROUP BY s.aircraft_code, s.fare_conditions
ORDER BY s.aircraft_code, service_class;

--Task 2
SELECT a.model          as aircraft_model,
       count(s.seat_no) as seat_count
from aircrafts a
         join seats s on a.aircraft_code = s.aircraft_code
GROUP BY aircraft_model
ORDER BY seat_count DESC
limit 3;

--Task3
select f.flight_no,
       FORMAT('%s:%s',
              FLOOR(EXTRACT(EPOCH FROM (f.actual_arrival - f.scheduled_arrival)) / 3600),
              FLOOR((EXTRACT(EPOCH FROM (f.actual_arrival - f.scheduled_arrival))
                  - FLOOR(EXTRACT(EPOCH FROM (f.actual_arrival - f.scheduled_arrival)) / 3600) * 3600) / 60)
       ) AS delay_time
from flights f
where f.actual_arrival > f.scheduled_arrival
  and extract(EPOCH from (f.actual_arrival - f.scheduled_arrival)) / 3600 > 2;

--Task 4
select passenger_name, contact_data, b.book_date
from tickets t
         join ticket_flights tf on t.ticket_no = tf.ticket_no
         join bookings b ON t.book_ref = b.book_ref
where tf.fare_conditions = 'Business'
order by b.book_date desc
limit 10;

--Task 5
select f.flight_no
from flights f
where f.flight_id not in (select tf.flight_id
                          from ticket_flights tf
                                   join tickets t on tf.ticket_no = t.ticket_no
                          where tf.fare_conditions = 'Business');

--Task 6
select airport_name, city
from airports a
         join flights f on a.airport_code = f.departure_airport
where f.scheduled_departure < f.actual_departure
group by city, airport_name;

--Task 7
select a.airport_name, count(f.flight_no) as fn
from airports a
         join flights f on a.airport_code = f.departure_airport
group by a.airport_name
order by fn desc;

--Task 8
select flight_no, scheduled_arrival, actual_arrival
from flights
where scheduled_arrival != actual_arrival;

--Task 9
select ad.aircraft_code, ad.model, s.seat_no
from aircrafts_data ad
         join seats s on ad.aircraft_code = s.aircraft_code
where ad.model ->> 'ru' = 'Аэробус A321-200'
  and s.fare_conditions != 'Economy'
order by seat_no;

--Task 10
select airport_code, airport_name, city
from airports a
where a.city IN (select city from airports group by city having COUNT(city) > 1)
order by city;

--Task 11
with passenger_total_booking as (select t.passenger_id, t.passenger_name, sum(b.total_amount) as total_booking_amount
                                 from tickets t
                                          join bookings b on t.book_ref = b.book_ref
                                 group by t.passenger_id, t.passenger_name),
     avenger_booking as (select avg(b.total_amount) as average_booking
                         from bookings b)
select p.passenger_id, p.passenger_name, p.total_booking_amount
from passenger_total_booking p,
     avenger_booking a
where p.total_booking_amount > a.average_booking
order by p.total_booking_amount DESC;

--Task 12
select f.flight_id,
       f.scheduled_departure,
       f.status,
       f.scheduled_departure
from flights f
         join
     airports a_dep on f.departure_airport = a_dep.airport_code
         join
     airports a_arr on f.arrival_airport = a_arr.airport_code
where a_dep.city = 'Екатеринбург'
  and a_arr.city = 'Москва'
  and f.status = 'Scheduled'
  and f.scheduled_departure > CURRENT_TIMESTAMP
limit 1;

--Task 13
with max_ticket as
         (select max(b.total_amount) as max_amount
          from tickets t
                   join bookings b on t.book_ref = b.book_ref),
     min_ticket as (select min(b.total_amount) as min_amount
                    from tickets t
                             join bookings b on t.book_ref = b.book_ref)
select 'Cheapest ticket' as min_ticket, min_ticket.min_amount
from min_ticket
union all
select 'Most expensive ticket' as max_ticket, max_ticket.max_amount
from max_ticket;

--Task 14
create table Customers
(
    id        int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    firstName varchar(255) not null,
    LastName  varchar(255) not null,
    email     varchar(255) not null unique,
    phone     varchar(13),
    CONSTRAINT check_email_format check ( email like '%_@__%.__%')
);

--Task 15
create table Orders(
                       id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       customerId int not null,
                       quantity int not null check ( quantity > 0 ),
                       CONSTRAINT customer foreign key (customerId) references Customers(id)
                           on  delete cascade
);

--Task 16
insert into Customers (firstName, lastName, email, phone)
values ('John', 'Doe', 'john.doe@example.com', '1234567890'),
       ('Jane', 'Smith', 'jane.smith@example.com', '0987654321'),
       ('Alice', 'Johnson', 'alice.johnson@example.com', '1112223333'),
       ('Bob', 'Brown', 'bob.brown@example.com', '4445556666'),
       ('Charlie', 'Davis', 'charlie.davis@example.com', '7778889999');

insert into Orders (customerId, quantity)
values (1, 2),
       (2, 1),
       (3, 5),
       (4, 4),
       (5, 2);

--Task 17
drop table if exists Orders;
drop table if exists Customers;